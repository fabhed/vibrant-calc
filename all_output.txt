To implement a calculator with colorful buttons, we will use Python with the Tkinter library for the GUI. The architecture will consist of the following files:

1. `main.py`: This is the entry point of the application. It will create an instance of the Calculator class and start the Tkinter event loop.

2. `calculator.py`: This file will contain the Calculator class. The Calculator class will be responsible for creating the GUI and handling user input.

3. `button.py`: This file will contain the Button class. The Button class will represent a button on the calculator. It will have a color property and a command property.

4. `requirements.txt`: This file will list the dependencies of the project.

Let's start with the `main.py` file:

main.py
```python
from calculator import Calculator

if __name__ == "__main__":
    calculator = Calculator()
    calculator.run()
```

Next, let's implement the `calculator.py` file:

calculator.py
```python
import tkinter as tk
from button import Button

class Calculator:
    def __init__(self):
        self.window = tk.Tk()
        self.window.title("Calculator")
        self.display = tk.Entry(self.window, width=20)
        self.display.grid(row=0, column=0, columnspan=4)
        self.buttons = [
            Button("7", "red", self.append_to_display),
            Button("8", "orange", self.append_to_display),
            Button("9", "yellow", self.append_to_display),
            Button("4", "green", self.append_to_display),
            Button("5", "blue", self.append_to_display),
            Button("6", "indigo", self.append_to_display),
            Button("1", "violet", self.append_to_display),
            Button("2", "red", self.append_to_display),
            Button("3", "orange", self.append_to_display),
            Button("0", "yellow", self.append_to_display),
            Button("+", "green", self.append_to_display),
            Button("-", "blue", self.append_to_display),
            Button("*", "indigo", self.append_to_display),
            Button("/", "violet", self.append_to_display),
            Button("=", "red", self.calculate),
            Button("C", "orange", self.clear_display),
        ]
        for i, button in enumerate(self.buttons):
            button.widget.grid(row=i//4+1, column=i%4)

    def run(self):
        self.window.mainloop()

    def append_to_display(self, text):
        self.display.insert(tk.END, text)

    def clear_display(self):
        self.display.delete(0, tk.END)

    def calculate(self):
        try:
            result = eval(self.display.get())
            self.clear_display()
            self.append_to_display(str(result))
        except Exception:
            self.clear_display()
            self.append_to_display("Error")
```

Now, let's implement the `button.py` file:

button.py
```python
import tkinter as tk

class Button:
    def __init__(self, text, color, command):
        self.widget = tk.Button(text=text, bg=color, command=lambda: command(text))
```

Finally, let's create the `requirements.txt` file:

requirements.txt
```
tkinter==8.6
```

This architecture should provide a fully functional calculator with colorful buttons. The calculator supports basic arithmetic operations and error handling.